{"version":3,"sources":["utility/hooks/useCounterTimer.js","views/pages/student/test/MainTest.js","views/pages/student/subjectTest/CountDownTimer.js","views/pages/student/subjectTest/MainTestHeader.js","views/pages/student/subjectTest/MainTestFooter.js","views/pages/student/subjectTest/Index.js"],"names":["useCounterTimer","targetDate","countDownDate","Date","getTime","useState","countDown","setCountDown","useEffect","interval","setInterval","clearInterval","getReturnValues","Math","floor","MainTest","fontSize","dispatch","useDispatch","instructionsData","useSelector","state","instructions","exam","currentSelectedSubject","currentSelectedQuestion","questionByID","examData","localiazedQuestions","checkedOption","setCheckedOption","Options","options","filteredInstrunctions","useMemo","findAllInstruction","filter","item","subject_name","localAns","questionnaire_id","_id","submited_ans","localStorage","getItem","questionnaire","questionsData","forEach","question","push","subject_id","submited_answered","setTimeout","storedLocaliazedQuestions","className","lg","md","length","map","instruction","style","description","pointerEvents","config","removePlugins","toolbar","editor","ClassicEditor","data","Object","entries","key","value","type","id","name","block","defaultValue","onChange","handleSelectAnswerByStudent","handleLocalizedQuestion","handleOptionsChange","checked","CountdownTimer","days","hours","minutes","seconds","MainTestHeader","fontInc","fontReset","fontDec","useHistory","dateTimeAfterDeadline","modal","setModal","handleEndSection","handleEndExamSession","ListGroup","horizontal","ListGroupItem","Button","Ripple","outline","color","size","onClick","e","preventDefault","ButtonGroup","UncontrolledTooltip","placement","target","MainTestFooter","window","location","search","split","Pagination","PaginationItem","PaginationLink","first","href","last","Index","setFontSize"],"mappings":"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","file":"static/js/53.751a41b9.chunk.js","sourcesContent":["// import React, { useState, useRef, useEffect } from 'react';\r\n\r\n// const useCounterTimer = (setMin = 0) => {\r\n// \tconst Ref = useRef(null);\r\n// \tconst [timer, setTimer] = useState('00:00');\r\n// \tconst getTimeRemaining = (e) => {\r\n// \t\tconst total = Date.parse(e) - Date.parse(new Date());\r\n// \t\tconst seconds = Math.floor((total / 1000) % 60);\r\n// \t\tconst minutes = Math.floor((total / 1000 / 60) % 60);\r\n// \t\tconst hours = Math.floor(((total / 1000) * 60 * 60) % 24);\r\n// \t\treturn {\r\n// \t\t\ttotal,\r\n// \t\t\thours,\r\n// \t\t\tminutes,\r\n// \t\t\tseconds,\r\n// \t\t};\r\n// \t};\r\n// \tconst startTimer = (e) => {\r\n// \t\tlet { total, hours, minutes, seconds } = getTimeRemaining(e);\r\n// \t\tif (total >= 0) {\r\n// \t\t\tsetTimer(\r\n// \t\t\t\t(minutes > 9 ? minutes : '0' + minutes) + ':' + (seconds > 9 ? seconds : '0' + seconds)\r\n// \t\t\t);\r\n// \t\t}\r\n// \t};\r\n// \tconst clearTimer = (e) => {\r\n// \t\tif (Ref.current) clearInterval(Ref.current);\r\n// \t\tconst id = setInterval(() => {\r\n// \t\t\tstartTimer(e);\r\n// \t\t}, 1000);\r\n// \t\tRef.current = id;\r\n// \t};\r\n// \tconst getDeadTime = () => {\r\n// \t\tlet deadline = new Date();\r\n// \t\t// deadline.setSeconds(deadline.getSeconds() + 60 * 60);\r\n// \t\tdeadline.setMinutes(deadline.getMinutes() + setMin);\r\n// \t\treturn deadline;\r\n// \t};\r\n// \tuseEffect(() => {\r\n// \t\tclearTimer(getDeadTime());\r\n// \t}, []);\r\n// \t// const onClickReset = () => {\r\n// \t// \tclearTimer(getDeadTime());\r\n// \t// };\r\n// \treturn { timer };\r\n// };\r\n// export default useCounterTimer;\r\n\r\nimport { useEffect, useState } from 'react';\r\n\r\nconst useCounterTimer = (targetDate) => {\r\n\tconst countDownDate = new Date(targetDate).getTime();\r\n\r\n\tconst [countDown, setCountDown] = useState(countDownDate - new Date().getTime());\r\n\r\n\tuseEffect(() => {\r\n\t\tconst interval = setInterval(() => {\r\n\t\t\tsetCountDown(countDownDate - new Date().getTime());\r\n\t\t}, 1000);\r\n\r\n\t\treturn () => clearInterval(interval);\r\n\t}, [countDownDate]);\r\n\r\n\treturn getReturnValues(countDown);\r\n};\r\n\r\nconst getReturnValues = (countDown) => {\r\n\t// calculate time left\r\n\tconst days = Math.floor(countDown / (1000 * 60 * 60 * 24));\r\n\tconst hours = Math.floor((countDown % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n\tconst minutes = Math.floor((countDown % (1000 * 60 * 60)) / (1000 * 60));\r\n\tconst seconds = Math.floor((countDown % (1000 * 60)) / 1000);\r\n\r\n\treturn [days, hours, minutes, seconds];\r\n};\r\n\r\nexport { useCounterTimer };\r\n","import React, { useState, useEffect, useMemo } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Row, Col, CustomInput, Label } from 'reactstrap';\r\nimport {\r\n\tstoredLocaliazedQuestions,\r\n\thandleLocalizedQuestion,\r\n\thandleSelectAnswerByStudent,\r\n} from '../../../../redux/examSlice';\r\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\r\n// import ClassicEditor from 'ckeditor5-classic-with-mathtype';\r\nimport ClassicEditor from '@blowstack/ckeditor5-full-free-build';\r\n\r\nfunction MainTest({ fontSize }) {\r\n\tconst dispatch = useDispatch();\r\n\tconst { instructionsData } = useSelector((state) => state.instructions);\r\n\tconst {\r\n\t\tcurrentSelectedSubject,\r\n\t\tcurrentSelectedQuestion,\r\n\t\tquestionByID,\r\n\t\texamData,\r\n\t\tlocaliazedQuestions,\r\n\t} = useSelector((state) => state.exam);\r\n\tconst [checkedOption, setCheckedOption] = useState('');\r\n\tconst Options = questionByID?.options[0];\r\n\r\n\tconst filteredInstrunctions = useMemo(() => {\r\n\t\treturn instructionsData?.findAllInstruction?.filter(\r\n\t\t\t(item) => item.subject_name === currentSelectedSubject\r\n\t\t);\r\n\t}, [instructionsData, currentSelectedSubject]);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst localAns = localiazedQuestions?.filter(\r\n\t\t\t(item) => item.questionnaire_id === questionByID?._id\r\n\t\t)[0]?.submited_ans;\r\n\t\tsetCheckedOption(localAns);\r\n\t}, [localiazedQuestions, questionByID]);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (localStorage.getItem('QuestionsList') === null && examData?.questionnaire) {\r\n\t\t\tconst questionsData = [];\r\n\t\t\texamData?.questionnaire?.forEach((question) =>\r\n\t\t\t\tquestionsData.push({\r\n\t\t\t\t\tsubject_id: question.subject_id,\r\n\t\t\t\t\tquestionnaire_id: question._id,\r\n\t\t\t\t\tsubmited_ans: '',\r\n\t\t\t\t\tsubmited_answered: '',\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t\tsetTimeout(() => dispatch(storedLocaliazedQuestions(questionsData)), 300);\r\n\t\t\t// localStorage.setItem('QuestionsList', JSON.stringify(questionsData));\r\n\t\t}\r\n\t}, [examData, dispatch]);\r\n\r\n\tconst handleOptionsChange = (key, value) => {\r\n\t\tsetCheckedOption(value);\r\n\t\tdispatch(handleSelectAnswerByStudent({ key, value }));\r\n\t\tdispatch(handleLocalizedQuestion(questionByID._id));\r\n\t};\r\n\treturn (\r\n\t\t<div className=\"main-test\">\r\n\t\t\t<Row>\r\n\t\t\t\t<Col lg=\"6\" md=\"6\" className=\"main-test-col\">\r\n\t\t\t\t\t{currentSelectedQuestion === 0 ? (\r\n\t\t\t\t\t\tfilteredInstrunctions?.length > 0 &&\r\n\t\t\t\t\t\tfilteredInstrunctions?.map((instruction) => (\r\n\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\tkey={instruction._id}\r\n\t\t\t\t\t\t\t\tclassName=\"question-list\"\r\n\t\t\t\t\t\t\t\tstyle={{ fontSize: `${fontSize}px` }}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{instruction?.description}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t))\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<Label style={{ fontSize: `${fontSize}px`, pointerEvents: 'none' }} className=\"mt-1\">\r\n\t\t\t\t\t\t\t<CKEditor\r\n\t\t\t\t\t\t\t\tconfig={{\r\n\t\t\t\t\t\t\t\t\tremovePlugins: ['Title', 'toolbar'],\r\n\t\t\t\t\t\t\t\t\ttoolbar: [],\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\teditor={ClassicEditor}\r\n\t\t\t\t\t\t\t\tdata={questionByID?.question}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Label>\r\n\t\t\t\t\t\t// <div className=\"question-list\" style={{ fontSize: `${fontSize}px` }}>\r\n\t\t\t\t\t\t// \t{questionByID?.question}\r\n\t\t\t\t\t\t// </div>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</Col>\r\n\t\t\t\t<Col lg=\"6\" md=\"6\" className=\"answer-list-col\">\r\n\t\t\t\t\t{currentSelectedQuestion !== 0 && (\r\n\t\t\t\t\t\t<div className=\"answer-list\">\r\n\t\t\t\t\t\t\t{Options &&\r\n\t\t\t\t\t\t\t\tObject.entries(Options)?.map(([key, value]) => (\r\n\t\t\t\t\t\t\t\t\t<div className=\"d-flex align-items-center \" key={key}>\r\n\t\t\t\t\t\t\t\t\t\t<CustomInput\r\n\t\t\t\t\t\t\t\t\t\t\ttype=\"radio\"\r\n\t\t\t\t\t\t\t\t\t\t\tid={`option${key}`}\r\n\t\t\t\t\t\t\t\t\t\t\tname=\"is_type\"\r\n\t\t\t\t\t\t\t\t\t\t\tblock\r\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"d-flex pl-3 mt-1\"\r\n\t\t\t\t\t\t\t\t\t\t\tdefaultValue={value}\r\n\t\t\t\t\t\t\t\t\t\t\tonChange={() => handleOptionsChange(key, value)}\r\n\t\t\t\t\t\t\t\t\t\t\tchecked={value == checkedOption ? true : false}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t<Label\r\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ fontSize: `${fontSize}px`, pointerEvents: 'none' }}\r\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"mt-1\"\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t<CKEditor\r\n\t\t\t\t\t\t\t\t\t\t\t\tconfig={{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tremovePlugins: ['Title', 'toolbar'],\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttoolbar: [],\r\n\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\teditor={ClassicEditor}\r\n\t\t\t\t\t\t\t\t\t\t\t\tdata={value}\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t</Label>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</Col>\r\n\t\t\t</Row>\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default MainTest;\r\n","// import { useCounterTimer } from '../../../../utility/hooks/useCounterTimer';\r\nimport { useCounterTimer } from '../../../../utility/hooks/useCounterTimer';\r\n\r\nconst CountdownTimer = ({ targetDate }) => {\r\n\tconst [days, hours, minutes, seconds] = useCounterTimer(targetDate);\r\n\r\n\tif (days + hours + minutes + seconds <= 0) {\r\n\t\treturn '00:00';\r\n\t} else {\r\n\t\treturn `${minutes > 9 ? minutes : '0' + minutes}:${seconds > 9 ? seconds : '0' + seconds}`;\r\n\t}\r\n};\r\n\r\nexport default CountdownTimer;\r\n","import React, { useEffect, useMemo, useState } from 'react';\r\nimport {\r\n\tArrowLeftCircle,\r\n\tArrowRightCircle,\r\n\tZoomIn,\r\n\tZoomOut,\r\n\tRotateCcw,\r\n\tClock,\r\n} from 'react-feather';\r\nimport {\r\n\tBadge,\r\n\tButton,\r\n\tButtonGroup,\r\n\tListGroup,\r\n\tListGroupItem,\r\n\tModal,\r\n\tModalBody,\r\n\tModalFooter,\r\n\tModalHeader,\r\n\tTable,\r\n\tUncontrolledTooltip,\r\n} from 'reactstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\n// import {\r\n// \tFlagQuestionBySubjectRequest,\r\n// \tGetAllQuestionsBySubjectRequest,\r\n// \tGetQuestionByParamsStudentRequest,\r\n// \thandleEndSectionClick,\r\n// \thandleSelectQuestionNext,\r\n// \thandleSelectQuestionPrev,\r\n// \thandleSetDeadLineExam,\r\n// \thandleStartedTimer,\r\n// \tTemporyResultRequest,\r\n// } from '../../../../redux/examSlice';\r\nimport Swal from 'sweetalert2';\r\nimport withReactContent from 'sweetalert2-react-content';\r\nimport CountdownTimer from './CountDownTimer';\r\n\r\n// const MySwal = withReactContent(Swal);\r\n\r\nfunction MainTestHeader({ fontInc, fontReset, fontDec }) {\r\n\tconst history = useHistory();\r\n\t// const {\r\n\t// \texamData,\r\n\t// \tcurrentSelectedQuestion,\r\n\t// \tcurrentSelectedSubject,\r\n\t// \tquestionByID,\r\n\t// \tcurrentActiveSection,\r\n\t// \tdeadLineExam,\r\n\t// \tstartedTimer,\r\n\t// \tlocaliazedQuestions,\r\n\t// } = useSelector((state) => state.exam);\r\n\t// const { instructionsData } = useSelector((state) => state.instructions);\r\n\tconst dispatch = useDispatch();\r\n\tconst [dateTimeAfterDeadline, setDateTimeAfterDeadline] = useState(0);\r\n\tconst [modal, setModal] = useState(false);\r\n\tconst toggle = () => setModal(!modal);\r\n\r\n\t// const EnglishSubjectQuestions = useMemo(() => {\r\n\t// \treturn examData?.questionnaire?.filter((item) => item.subject_name === 'English');\r\n\t// }, [examData]);\r\n\r\n\t// const MathsSubjectQuestions = useMemo(() => {\r\n\t// \treturn examData?.questionnaire?.filter((item) => item.subject_name === 'Maths');\r\n\t// }, [examData]);\r\n\r\n\t// const ScienceSubjectQuestions = useMemo(() => {\r\n\t// \treturn examData?.questionnaire?.filter((item) => item.subject_name === 'Science');\r\n\t// }, [examData]);\r\n\r\n\t// const ReadingSubjectQuestions = useMemo(() => {\r\n\t// \treturn examData?.questionnaire?.filter((item) => item.subject_name === 'Reading');\r\n\t// }, [examData]);\r\n\r\n\t// useEffect(() => {\r\n\t// \t// SET THE TIME HERE\r\n\t// \tif (startedTimer) {\r\n\t// \t\tconst SetTimeDeadline = deadLineExam * 60 * 1000;\r\n\t// \t\tconst NOW_IN_MS = new Date().getTime();\r\n\t// \t\tsetDateTimeAfterDeadline(NOW_IN_MS + SetTimeDeadline);\r\n\t// \t} else if (currentActiveSection === 'Break-15min') {\r\n\t// \t\tconst SetTimeDeadline = 15 * 60 * 1000;\r\n\t// \t\tconst NOW_IN_MS = new Date().getTime();\r\n\t// \t\tsetDateTimeAfterDeadline(NOW_IN_MS + SetTimeDeadline);\r\n\t// \t} else {\r\n\t// \t\t// SET DEFAULT TIME 0 MINUTE\r\n\t// \t\tconst NOW_IN_MS = new Date().getTime();\r\n\t// \t\tsetDateTimeAfterDeadline(NOW_IN_MS + 0);\r\n\t// \t}\r\n\t// }, [startedTimer, deadLineExam, currentActiveSection]);\r\n\r\n\t// const getMintueForSubject = useMemo(\r\n\t// \t() =>\r\n\t// \t\tinstructionsData?.findAllInstruction?.filter(\r\n\t// \t\t\t(subject) => subject.subject_name === currentActiveSection\r\n\t// \t\t)[0]?.time_duration,\r\n\t// \t[instructionsData, currentActiveSection]\r\n\t// );\r\n\t// useEffect(() => {\r\n\t// \tif (!startedTimer && currentSelectedQuestion !== 0) {\r\n\t// \t\tdispatch(handleSetDeadLineExam(getMintueForSubject));\r\n\t// \t\tdispatch(handleStartedTimer(true));\r\n\t// \t}\r\n\t// }, [currentSelectedQuestion, startedTimer]);\r\n\r\n\t// useEffect(() => {\r\n\t// \tdispatch(GetAllQuestionsBySubjectRequest());\r\n\t// }, [dispatch]);\r\n\r\n\tconst handlePrevButton = (e) => {\r\n\t\te.preventDefault();\r\n\t\t// if (currentSelectedQuestion > 1) {\r\n\t\t// \tdispatch(handleSelectQuestionPrev());\r\n\t\t// \tconst queryString = `question_number=${questionByID.question_number - 1}&subject_name=${\r\n\t\t// \t\tquestionByID.subject_name\r\n\t\t// \t}`;\r\n\t\t// \tdispatch(GetQuestionByParamsStudentRequest(queryString));\r\n\t\t// }\r\n\t};\r\n\r\n\tconst handleNextButton = (e) => {\r\n\t\te.preventDefault();\r\n\t\t// if (currentSelectedQuestion === 0) {\r\n\t\t// \tdispatch(handleSelectQuestionNext());\r\n\t\t// \tconst queryString = `question_number=${1}&subject_name=${currentActiveSection}`;\r\n\t\t// \tdispatch(GetQuestionByParamsStudentRequest(queryString));\r\n\t\t// }\r\n\t\t// if (currentSelectedQuestion >= 1) {\r\n\t\t// \tdispatch(handleSelectQuestionNext());\r\n\t\t// \tconst queryString = `question_number=${questionByID.question_number + 1}&subject_name=${\r\n\t\t// \t\tquestionByID.subject_name\r\n\t\t// \t}`;\r\n\t\t// \tdispatch(GetQuestionByParamsStudentRequest(queryString));\r\n\t\t// }\r\n\t};\r\n\tconst handleFlagButtonClick = (e) => {\r\n\t\te.preventDefault();\r\n\t\t// dispatch(\r\n\t\t// \tFlagQuestionBySubjectRequest({\r\n\t\t// \t\tquestionnaire_id: questionByID._id,\r\n\t\t// \t})\r\n\t\t// );\r\n\t\t// const queryString = `question_number=${questionByID.question_number}&subject_name=${questionByID.subject_name}`;\r\n\t\t// dispatch(GetQuestionByParamsStudentRequest(queryString));\r\n\t};\r\n\r\n\tconst handleEndSection = async () => {\r\n\t\t// return MySwal.fire({\r\n\t\t// \ttitle: 'Are you sure?',\r\n\t\t// \t// text: 'You would not be able to revert this!',\r\n\t\t// \ticon: 'warning',\r\n\t\t// \tshowCancelButton: true,\r\n\t\t// \tconfirmButtonText: 'Yes, End the Section !',\r\n\t\t// \tcustomClass: {\r\n\t\t// \t\tconfirmButton: 'btn text-white main-color-btn',\r\n\t\t// \t\tcancelButton: 'btn btn-outline-danger ml-1',\r\n\t\t// \t},\r\n\t\t// \tbuttonsStyling: false,\r\n\t\t// }).then(async function (result) {\r\n\t\t// \tif (result.value) {\r\n\t\t// \t\tMySwal.fire({\r\n\t\t// \t\t\ticon: 'success',\r\n\t\t// \t\t\ttitle: 'End Section!',\r\n\t\t// \t\t\ttext: 'Your Section has been Ended.',\r\n\t\t// \t\t\tcustomClass: {\r\n\t\t// \t\t\t\tconfirmButton: 'btn btn-success',\r\n\t\t// \t\t\t},\r\n\t\t// \t\t});\r\n\t\t// \t\tdispatch(handleEndSectionClick(currentSelectedSubject));\r\n\t\t// \t}\r\n\t\t// });\r\n\t};\r\n\r\n\tconst handleEndExamSession = async () => {\r\n\t\t// return MySwal.fire({\r\n\t\t// \ttitle: 'Are you sure?',\r\n\t\t// \t// text: 'You would not be able to revert this!',\r\n\t\t// \ticon: 'warning',\r\n\t\t// \tshowCancelButton: true,\r\n\t\t// \tconfirmButtonText: 'Yes, End the Session !',\r\n\t\t// \tcustomClass: {\r\n\t\t// \t\tconfirmButton: 'btn text-white main-color-btn',\r\n\t\t// \t\tcancelButton: 'btn btn-outline-danger ml-1',\r\n\t\t// \t},\r\n\t\t// \tbuttonsStyling: false,\r\n\t\t// }).then(async function (result) {\r\n\t\t// \tif (result.value) {\r\n\t\t// \t\tMySwal.fire({\r\n\t\t// \t\t\ticon: 'success',\r\n\t\t// \t\t\ttitle: 'End Session!',\r\n\t\t// \t\t\ttext: 'Your Session has been Ended.',\r\n\t\t// \t\t\tcustomClass: {\r\n\t\t// \t\t\t\tconfirmButton: 'btn btn-success',\r\n\t\t// \t\t\t},\r\n\t\t// \t\t});\r\n\t\t// \t\tdispatch(\r\n\t\t// \t\t\tTemporyResultRequest({\r\n\t\t// \t\t\t\ttype: 'end',\r\n\t\t// \t\t\t\tTemp_Quiz_Data: localiazedQuestions,\r\n\t\t// \t\t\t})\r\n\t\t// \t\t);\r\n\t\t// \t\thistory.push('/student/results');\r\n\t\t// \t}\r\n\t\t// });\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div className=\"bg-dark text-light test-footer-bar main-test-header\">\r\n\t\t\t\t<ListGroup horizontal>\r\n\t\t\t\t\t{/* <ListGroupItem disabled={currentSelectedQuestion <= 1}> */}\r\n\t\t\t\t\t<ListGroupItem>\r\n\t\t\t\t\t\t<Button.Ripple\r\n\t\t\t\t\t\t\toutline\r\n\t\t\t\t\t\t\tclassName=\"round\"\r\n\t\t\t\t\t\t\tcolor=\"secondary text-white\"\r\n\t\t\t\t\t\t\tsize=\"sm\"\r\n\t\t\t\t\t\t\tonClick={handlePrevButton}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<ArrowLeftCircle size={16} />\r\n\t\t\t\t\t\t\t<span className=\"align-middle ms-25\">Previous</span>\r\n\t\t\t\t\t\t</Button.Ripple>\r\n\t\t\t\t\t</ListGroupItem>\r\n\t\t\t\t\t<ListGroupItem>\r\n\t\t\t\t\t\t<Button.Ripple\r\n\t\t\t\t\t\t\toutline\r\n\t\t\t\t\t\t\tclassName=\"round\"\r\n\t\t\t\t\t\t\tcolor=\"secondary text-white\"\r\n\t\t\t\t\t\t\tsize=\"sm\"\r\n\t\t\t\t\t\t\tonClick={toggle}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<span className=\"align-middle ms-25\">Nav</span>\r\n\t\t\t\t\t\t</Button.Ripple>\r\n\t\t\t\t\t</ListGroupItem>\r\n\t\t\t\t\t<ListGroupItem>\r\n\t\t\t\t\t\t<Button.Ripple\r\n\t\t\t\t\t\t\toutline\r\n\t\t\t\t\t\t\tclassName=\"round\"\r\n\t\t\t\t\t\t\tcolor=\"secondary text-white\"\r\n\t\t\t\t\t\t\tsize=\"sm\"\r\n\t\t\t\t\t\t\tonClick={handleNextButton}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<span className=\"align-middle ms-25\">Next</span>\r\n\t\t\t\t\t\t\t<ArrowRightCircle size={16} />\r\n\t\t\t\t\t\t</Button.Ripple>\r\n\t\t\t\t\t</ListGroupItem>\r\n\t\t\t\t</ListGroup>\r\n\t\t\t\t<ListGroup horizontal>\r\n\t\t\t\t\t<ListGroupItem>Manage Assesments</ListGroupItem>\r\n\t\t\t\t\t<ListGroupItem\r\n\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\thandleEndSection();\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tEnd Section\r\n\t\t\t\t\t</ListGroupItem>\r\n\t\t\t\t\t<ListGroupItem onClick={handleFlagButtonClick}>Flag</ListGroupItem>\r\n\t\t\t\t\t{/* <ListGroupItem>\r\n\t\t\t\t\t\t<UncontrolledDropdown>\r\n\t\t\t\t\t\t\t<DropdownToggle caret>\r\n\t\t\t\t\t\t\t\t<Tool size={16} />\r\n\t\t\t\t\t\t\t\tTools\r\n\t\t\t\t\t\t\t</DropdownToggle>\r\n\t\t\t\t\t\t\t<DropdownMenu>\r\n\t\t\t\t\t\t\t\t<DropdownItem>Header</DropdownItem>\r\n\t\t\t\t\t\t\t\t<DropdownItem>Another Action</DropdownItem>\r\n\t\t\t\t\t\t\t</DropdownMenu>\r\n\t\t\t\t\t\t</UncontrolledDropdown>\r\n\t\t\t\t\t</ListGroupItem> */}\r\n\r\n\t\t\t\t\t<ListGroupItem>\r\n\t\t\t\t\t\t<ButtonGroup className=\"zoom-btngroup\">\r\n\t\t\t\t\t\t\t<Button onClick={() => fontInc()} id=\"zoom-in-btn\">\r\n\t\t\t\t\t\t\t\t<ZoomIn size={16} />\r\n\t\t\t\t\t\t\t\t<UncontrolledTooltip placement=\"bottom\" target=\"zoom-in-btn\">\r\n\t\t\t\t\t\t\t\t\tZoom In\r\n\t\t\t\t\t\t\t\t</UncontrolledTooltip>\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t<Button onClick={() => fontReset()} id=\"reset-btn\">\r\n\t\t\t\t\t\t\t\t<RotateCcw size={16} />\r\n\t\t\t\t\t\t\t\t<UncontrolledTooltip placement=\"bottom\" target=\"reset-btn\">\r\n\t\t\t\t\t\t\t\t\tReset\r\n\t\t\t\t\t\t\t\t</UncontrolledTooltip>\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t<Button onClick={() => fontDec()} id=\"zoom-out-btn\">\r\n\t\t\t\t\t\t\t\t<ZoomOut size={16} />\r\n\t\t\t\t\t\t\t\t<UncontrolledTooltip placement=\"bottom\" target=\"zoom-out-btn\">\r\n\t\t\t\t\t\t\t\t\tZoom Out\r\n\t\t\t\t\t\t\t\t</UncontrolledTooltip>\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</ButtonGroup>\r\n\t\t\t\t\t</ListGroupItem>\r\n\t\t\t\t\t<ListGroupItem onClick={handleEndExamSession}>End Session</ListGroupItem>\r\n\t\t\t\t\t<ListGroupItem>\r\n\t\t\t\t\t\t<Button className=\"timer-btn\">\r\n\t\t\t\t\t\t\t<Clock size={16} />\r\n\t\t\t\t\t\t\t{/* {timer} */}\r\n\t\t\t\t\t\t\t<CountdownTimer targetDate={dateTimeAfterDeadline} />\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</ListGroupItem>\r\n\t\t\t\t</ListGroup>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default MainTestHeader;\r\n","import React, { useMemo } from 'react';\r\nimport { Flag } from 'react-feather';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { PaginationItem, Pagination, PaginationLink } from 'reactstrap';\r\n// import {\r\n// \thandleGetQuestionByID,\r\n// \thandleSelectQuestion,\r\n// \thandleSelectSubject,\r\n// } from '../../../../redux/examSlice';\r\n\r\nfunction MainTestFooter() {\r\n\tconst dispatch = useDispatch();\r\n\tlet checkSubject =\r\n\t\twindow.location.search.split('=')[window.location.search.split('=').length - 1];\r\n\r\n\t// const { examData, currentSelectedQuestion, currentSelectedSubject, currentActiveSection } =\r\n\t// \tuseSelector((state) => state.exam);\r\n\r\n\t// const EnglishSubjectQuestions = useMemo(() => {\r\n\t// \treturn examData?.questionnaire?.filter((item) => item.subject_name === 'English');\r\n\t// }, [examData]);\r\n\t// const MathsSubjectQuestions = useMemo(() => {\r\n\t// \treturn examData?.questionnaire?.filter((item) => item.subject_name === 'Maths');\r\n\t// }, [examData]);\r\n\t// const ScienceSubjectQuestions = useMemo(() => {\r\n\t// \treturn examData?.questionnaire?.filter((item) => item.subject_name === 'Science');\r\n\t// }, [examData]);\r\n\t// const ReadingSubjectQuestions = useMemo(() => {\r\n\t// \treturn examData?.questionnaire?.filter((item) => item.subject_name === 'Reading');\r\n\t// }, [examData]);\r\n\r\n\tconst handleClickOnPagination = (e, data) => {\r\n\t\te.preventDefault();\r\n\t\t// dispatch(handleSelectQuestion(data.question_number));\r\n\t\t// dispatch(handleSelectSubject(data.subject_name));\r\n\t\t// dispatch(handleGetQuestionByID(data._id));\r\n\t};\r\n\r\n\tconst handleSectionInfoPagination = (e, data) => {\r\n\t\te.preventDefault();\r\n\t\t// dispatch(handleSelectQuestion(0));\r\n\t\t// dispatch(handleSelectSubject(data.subject_name));\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{/* <PaginationItem className=\"flag-active\">\r\n\t\t\t\t\t<Flag size={10} />\r\n\t\t\t\t\t<PaginationLink href=\"#\" className=\"active\">\r\n\t\t\t\t\t\t1\r\n\t\t\t\t\t</PaginationLink>\r\n\t\t\t\t</PaginationItem> */}\r\n\t\t\t<Pagination aria-label=\"Page navigation example\" className=\"test-pagination\" size=\"sm\">\r\n\t\t\t\t<PaginationItem>\r\n\t\t\t\t\t<PaginationLink first href=\"#\" />\r\n\t\t\t\t</PaginationItem>\r\n\r\n\t\t\t\t<>\r\n\t\t\t\t\t{/* {examData?.subjectsCount?.English && (\r\n\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t<PaginationItem\r\n\t\t\t\t\t\t\t\tdisabled={currentActiveSection !== 'English'}\r\n\t\t\t\t\t\t\t\tactive={\r\n\t\t\t\t\t\t\t\t\tcurrentSelectedQuestion === 0 &&\r\n\t\t\t\t\t\t\t\t\tcurrentSelectedSubject === 'English' &&\r\n\t\t\t\t\t\t\t\t\tcurrentActiveSection === 'English'\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<PaginationLink\r\n\t\t\t\t\t\t\t\t\thref=\"#\"\r\n\t\t\t\t\t\t\t\t\tonClick={(e) =>\r\n\t\t\t\t\t\t\t\t\t\thandleSectionInfoPagination(e, {\r\n\t\t\t\t\t\t\t\t\t\t\tsubject_name: 'English',\r\n\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tEnglish Section Info\r\n\t\t\t\t\t\t\t\t</PaginationLink>\r\n\t\t\t\t\t\t\t</PaginationItem>\r\n\t\t\t\t\t\t\t{EnglishSubjectQuestions?.map((question) => {\r\n\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t<PaginationItem\r\n\t\t\t\t\t\t\t\t\t\tkey={question._id}\r\n\t\t\t\t\t\t\t\t\t\tdisabled={currentActiveSection !== 'English'}\r\n\t\t\t\t\t\t\t\t\t\tactive={\r\n\t\t\t\t\t\t\t\t\t\t\tquestion.question_number === currentSelectedQuestion &&\r\n\t\t\t\t\t\t\t\t\t\t\tcurrentSelectedSubject === 'English'\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tclassName=\"flag-active\"\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t{question?.flag === '1' && <Flag size={16} />}\r\n\t\t\t\t\t\t\t\t\t\t<PaginationLink href=\"#\" onClick={(e) => handleClickOnPagination(e, question)}>\r\n\t\t\t\t\t\t\t\t\t\t\t{question.question_number}\r\n\t\t\t\t\t\t\t\t\t\t</PaginationLink>\r\n\t\t\t\t\t\t\t\t\t</PaginationItem>\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t</>\r\n\t\t\t\t\t)} */}\r\n\t\t\t\t</>\r\n\r\n\t\t\t\t{/* {examData?.subjectsCount?.Maths && (\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t<PaginationItem\r\n\t\t\t\t\t\t\tdisabled={currentActiveSection !== 'Maths'}\r\n\t\t\t\t\t\t\tactive={\r\n\t\t\t\t\t\t\t\tcurrentSelectedQuestion === 0 &&\r\n\t\t\t\t\t\t\t\tcurrentSelectedSubject === 'Maths' &&\r\n\t\t\t\t\t\t\t\tcurrentActiveSection === 'Maths'\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<PaginationLink\r\n\t\t\t\t\t\t\t\thref=\"#\"\r\n\t\t\t\t\t\t\t\tonClick={(e) =>\r\n\t\t\t\t\t\t\t\t\thandleSectionInfoPagination(e, {\r\n\t\t\t\t\t\t\t\t\t\tsubject_name: 'Maths',\r\n\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tMaths Section Info\r\n\t\t\t\t\t\t\t</PaginationLink>\r\n\t\t\t\t\t\t</PaginationItem>\r\n\t\t\t\t\t\t{MathsSubjectQuestions?.map((question) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<PaginationItem\r\n\t\t\t\t\t\t\t\t\tkey={question._id}\r\n\t\t\t\t\t\t\t\t\tdisabled={currentActiveSection !== 'Maths'}\r\n\t\t\t\t\t\t\t\t\tactive={\r\n\t\t\t\t\t\t\t\t\t\tquestion.question_number === currentSelectedQuestion &&\r\n\t\t\t\t\t\t\t\t\t\tcurrentSelectedSubject === 'Maths'\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tclassName=\"flag-active\"\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t{question?.flag === '1' && <Flag size={16} />}\r\n\t\t\t\t\t\t\t\t\t<PaginationLink href=\"#\" onClick={(e) => handleClickOnPagination(e, question)}>\r\n\t\t\t\t\t\t\t\t\t\t{question.question_number}\r\n\t\t\t\t\t\t\t\t\t</PaginationLink>\r\n\t\t\t\t\t\t\t\t</PaginationItem>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</>\r\n\t\t\t\t)} */}\r\n\r\n\t\t\t\t{/* <PaginationItem\r\n\t\t\t\t\tdisabled={currentActiveSection !== 'Break-15min'}\r\n\t\t\t\t\tactive={\r\n\t\t\t\t\t\tcurrentSelectedQuestion === 0 &&\r\n\t\t\t\t\t\tcurrentSelectedSubject === 'Break-15min' &&\r\n\t\t\t\t\t\tcurrentActiveSection === 'Break-15min'\r\n\t\t\t\t\t}\r\n\t\t\t\t>\r\n\t\t\t\t\t<PaginationLink\r\n\t\t\t\t\t\thref=\"#\"\r\n\t\t\t\t\t\tonClick={(e) =>\r\n\t\t\t\t\t\t\thandleSectionInfoPagination(e, {\r\n\t\t\t\t\t\t\t\tsubject_name: 'Break-15min',\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tBreak 15 Min\r\n\t\t\t\t\t</PaginationLink>\r\n\t\t\t\t</PaginationItem>\r\n\r\n\t\t\t\t{examData?.subjectsCount?.Reading && (\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t<PaginationItem\r\n\t\t\t\t\t\t\tdisabled={currentActiveSection !== 'Reading'}\r\n\t\t\t\t\t\t\tactive={\r\n\t\t\t\t\t\t\t\tcurrentSelectedQuestion === 0 &&\r\n\t\t\t\t\t\t\t\tcurrentSelectedSubject === 'Reading' &&\r\n\t\t\t\t\t\t\t\tcurrentActiveSection === 'Reading'\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<PaginationLink\r\n\t\t\t\t\t\t\t\thref=\"#\"\r\n\t\t\t\t\t\t\t\tonClick={(e) =>\r\n\t\t\t\t\t\t\t\t\thandleSectionInfoPagination(e, {\r\n\t\t\t\t\t\t\t\t\t\tsubject_name: 'Reading',\r\n\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tReading Section Info\r\n\t\t\t\t\t\t\t</PaginationLink>\r\n\t\t\t\t\t\t</PaginationItem>\r\n\t\t\t\t\t\t{ReadingSubjectQuestions?.map((question) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<PaginationItem\r\n\t\t\t\t\t\t\t\t\tkey={question._id}\r\n\t\t\t\t\t\t\t\t\tdisabled={currentActiveSection !== 'Reading'}\r\n\t\t\t\t\t\t\t\t\tactive={\r\n\t\t\t\t\t\t\t\t\t\tquestion.question_number === currentSelectedQuestion &&\r\n\t\t\t\t\t\t\t\t\t\tcurrentSelectedSubject === 'Reading'\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tclassName=\"flag-active\"\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t{question?.flag === '1' && <Flag size={16} />}\r\n\t\t\t\t\t\t\t\t\t<PaginationLink href=\"#\" onClick={(e) => handleClickOnPagination(e, question)}>\r\n\t\t\t\t\t\t\t\t\t\t{question.question_number}\r\n\t\t\t\t\t\t\t\t\t</PaginationLink>\r\n\t\t\t\t\t\t\t\t</PaginationItem>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</>\r\n\t\t\t\t)}\r\n\r\n\t\t\t\t{examData?.subjectsCount?.Science && (\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t<PaginationItem\r\n\t\t\t\t\t\t\tdisabled={currentActiveSection !== 'Science'}\r\n\t\t\t\t\t\t\tactive={\r\n\t\t\t\t\t\t\t\tcurrentSelectedQuestion === 0 &&\r\n\t\t\t\t\t\t\t\tcurrentSelectedSubject === 'Science' &&\r\n\t\t\t\t\t\t\t\tcurrentActiveSection === 'Science'\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<PaginationLink\r\n\t\t\t\t\t\t\t\thref=\"#\"\r\n\t\t\t\t\t\t\t\tonClick={(e) =>\r\n\t\t\t\t\t\t\t\t\thandleSectionInfoPagination(e, {\r\n\t\t\t\t\t\t\t\t\t\tsubject_name: 'Science',\r\n\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tScience Section Info\r\n\t\t\t\t\t\t\t</PaginationLink>\r\n\t\t\t\t\t\t</PaginationItem>\r\n\t\t\t\t\t\t{ScienceSubjectQuestions?.map((question) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<PaginationItem\r\n\t\t\t\t\t\t\t\t\tkey={question._id}\r\n\t\t\t\t\t\t\t\t\tdisabled={currentActiveSection !== 'Science'}\r\n\t\t\t\t\t\t\t\t\tactive={\r\n\t\t\t\t\t\t\t\t\t\tquestion.question_number === currentSelectedQuestion &&\r\n\t\t\t\t\t\t\t\t\t\tcurrentSelectedSubject === 'Science'\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tclassName=\"flag-active\"\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t{question?.flag === '1' && <Flag size={16} />}\r\n\t\t\t\t\t\t\t\t\t<PaginationLink href=\"#\" onClick={(e) => handleClickOnPagination(e, question)}>\r\n\t\t\t\t\t\t\t\t\t\t{question.question_number}\r\n\t\t\t\t\t\t\t\t\t</PaginationLink>\r\n\t\t\t\t\t\t\t\t</PaginationItem>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</>\r\n\t\t\t\t)} */}\r\n\r\n\t\t\t\t<PaginationItem>\r\n\t\t\t\t\t<PaginationLink href=\"#\" last />\r\n\t\t\t\t</PaginationItem>\r\n\t\t\t</Pagination>\r\n\t\t</>\r\n\t);\r\n}\r\nexport default MainTestFooter;\r\n","import React, { useState } from 'react';\r\nimport MainTest from '../test/MainTest';\r\nimport MainTestHeader from './MainTestHeader';\r\nimport MainTestFooter from './MainTestFooter';\r\nconst Index = () => {\r\n\tconst [fontSize, setFontSize] = useState(14);\r\n\r\n\tconst fontInc = () => {\r\n\t\tif (fontSize < 28) {\r\n\t\t\tsetFontSize((fontSize) => fontSize + 4);\r\n\t\t}\r\n\t};\r\n\tconst fontDec = () => {\r\n\t\tif (fontSize > 10) {\r\n\t\t\tsetFontSize((fontSize) => fontSize - 4);\r\n\t\t}\r\n\t};\r\n\tconst fontReset = () => {\r\n\t\tsetFontSize(14);\r\n\t};\r\n\treturn (\r\n\t\t<div className=\"main-test-sec\">\r\n\t\t\t<MainTestHeader fontInc={fontInc} fontDec={fontDec} fontReset={fontReset} />\r\n\t\t\t<MainTest />\r\n\t\t\t<MainTestFooter />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Index;\r\n"],"sourceRoot":""}